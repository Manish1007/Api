//connecting mongoose and creating playerschema

const mongoose = require('mongoose');
const playerSchema = new mongoose.Schema({
  name: String,
  score: Number,
  age:Number
});

const Player = mongoose.model('Player', playerSchema);

module.exports = Player;

// data.js this is main code which is loaded into node.js

const express = require('express');
const mongoose = require('mongoose');
const Player = require('./Player');

const app = express();
app.use(express.json());

const mongoURI = 'mongodb://localhost:27017/data'; //MongoDB URI from mongodb compass
mongoose.connect(mongoURI, { 
useNewUrlParser: true, 
useUnifiedTopology: true
});

const db = mongoose.connection;

db.on('error', (error) => console.error('MongoDB connection error:', error));
db.once('open', () => console.log('Connected to MongoDB'));

app.post('/players', async (req, res) => {
  try {
    const newPlayer = new Player(req.body);
    const savedPlayer = await newPlayer.save();
    res.status(201).json(savedPlayer);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

app.get('/players/:id', async (req, res) => {
  try {
    const player = await Player.findById(req.params.id);
    if (!player) throw new Error('Player not found');
    res.status(200).json(player);
  } catch (err) {
    res.status(404).json({ message: err.message });
  }
});

app.patch('/players/:id', async (req, res) => {
  try {
    const updatedPlayer = await Player.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true }
    );
    if (!updatedPlayer) throw new Error('Player not found');
    res.status(200).json(updatedPlayer);
  } catch (err) {
    res.status(404).json({ message: err.message });
  }
});

app.delete('/players/:id', async (req, res) => {
  try {
    const deletedPlayer = await Player.findByIdAndRemove(req.params.id);
    if (!deletedPlayer) throw new Error('Player not found');
    res.status(204).send();
  } catch (err) {
    res.status(404).json({ message: err.message });
  }
});

app.get('/players', async (req, res) => {
  try {
    const players = await Player.find(); // queries can be changed here
    res.status(200).json(players);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
